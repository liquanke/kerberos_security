package RSA;


public class Main {
	public static void main(String[]argc)
    {
		System.out.println("1");
		 	
		/*AS公钥加密解密
		BigInteger[] pubkey = new BigInteger[2];// as的公钥 
	    BigInteger[] selfkey = new BigInteger[2];//
	    pubkey[0]=new BigInteger("25210376174222502674597043575587868433359845921729777429392593376801244718803287391093663295857829689208086882496347648829616115541377572451813241929958704483188200039335156767743378800207443537960952226191738855785981692041259305829486869081914154060612653741010933367421479008336912956487753130634749042193278479439430114897156732011964917535436211234837825681273904534007141953227436227382619843005754349476204056079297744670168472659413655833978852141561891871277772065229804420765889528128945186167113014241572555603967433653284618158672392942089685732576941187113403406438710612351646692434368229939197562886053");
        pubkey[1]=new BigInteger("65537");
        
        RSA test=new RSA(pubkey,selfkey);
        
        
        String plian="nihaeeeeee";
        System.out.println("2");
        String first=test.encrypt_string(plian);
        System.out.println(test.encrypt_string(plian).length());
        System.out.print("加密结果");
        System.out.println(first);
        
        
        BigInteger[] pubkey1 = new BigInteger[2];// 
	    BigInteger[] selfkey1 = new BigInteger[2];//as的私钥 
        selfkey1[0]=new BigInteger("25210376174222502674597043575587868433359845921729777429392593376801244718803287391093663295857829689208086882496347648829616115541377572451813241929958704483188200039335156767743378800207443537960952226191738855785981692041259305829486869081914154060612653741010933367421479008336912956487753130634749042193278479439430114897156732011964917535436211234837825681273904534007141953227436227382619843005754349476204056079297744670168472659413655833978852141561891871277772065229804420765889528128945186167113014241572555603967433653284618158672392942089685732576941187113403406438710612351646692434368229939197562886053");
        selfkey1[1]=new BigInteger("7966212676686052274108216357276792764185865224119229760063646737570791718902257939517504206691178952863424802014386735120809926251527963561112050095785812764428405856456532363446566543685184677779473574503024550474875182881157803445730557880546259615808283051140507180767069117958544492666812328643590916803743230918998859396916879335178013369522311005488324026610045994121717660760451950068281301680966849291309938724927135552896273162877329023669569465557061157101029234954680266130151096816933472713677410888633942626849606657904456520762801554926516494475475413862039683685098803478093492093451471858905326660669"); 
        
        RSA test2=new RSA(pubkey1,selfkey1);
        String second=test2.decrypt_string(first);
        System.out.print("解密结果");
        System.out.println(second);
        */
		
		
		/*
		 * 
selfkey n:25210376174222502674597043575587868433359845921729777429392593376801244718803287391093663295857829689208086882496347648829616115541377572451813241929958704483188200039335156767743378800207443537960952226191738855785981692041259305829486869081914154060612653741010933367421479008336912956487753130634749042193278479439430114897156732011964917535436211234837825681273904534007141953227436227382619843005754349476204056079297744670168472659413655833978852141561891871277772065229804420765889528128945186167113014241572555603967433653284618158672392942089685732576941187113403406438710612351646692434368229939197562886053
d:7966212676686052274108216357276792764185865224119229760063646737570791718902257939517504206691178952863424802014386735120809926251527963561112050095785812764428405856456532363446566543685184677779473574503024550474875182881157803445730557880546259615808283051140507180767069117958544492666812328643590916803743230918998859396916879335178013369522311005488324026610045994121717660760451950068281301680966849291309938724927135552896273162877329023669569465557061157101029234954680266130151096816933472713677410888633942626849606657904456520762801554926516494475475413862039683685098803478093492093451471858905326660669
p:2443821669382424476829724296825455999556600325207863935819275503905979524125550649886512762461328869633622024124531065863081415140366062027859884383812741099190661687351900986106736250903923168562866069649466421358978726254815761396395431356324175699149290147556635189909694259915656144570122956377797477067
q:10315963922438493431888868389867065366491379808751437087609822941792868001649723374032218980527443660328209361371047969375701255154868127174808079800554721312180119238724021856716780598044859119909251945583270682116316375563512280208796026217806657635952627369548950989237582593520587417992027615350337347457359
		 * */
		
		
		
		
		/*client公钥加密解密
		BigInteger[] pubkey = new BigInteger[2];// client的公钥
	    BigInteger[] selfkey = new BigInteger[2];// 
	    pubkey[0]=new BigInteger("15953647027545295465747805382866819526117440265215991308033458652664612350105479503548918269729662417554196828789324434596466902083041772175917887059400125691500007961017266938917738050521832462742456217678582185049805673470256119849702409420801653989737607638660404802938371025939922085578897008974600311573073492980981836831285026649067928786525625207998174712353145920235093522356288006523516279472152289699410257843345037745127281744055032154485461900797286285244753248225027717169101087813977000729794268302831580540477753061465428433116763121401082465834870860517886585078606317057802511464076412575658383250809");
        pubkey[1]=new BigInteger("65537");
        
        RSA test=new RSA(pubkey,selfkey);
        String plian="nihaeeeeee";
        System.out.println("2");
        String first=test.encrypt_string(plian);
        System.out.println(test.encrypt_string(plian).length());
        System.out.print("加密结果");
        System.out.println(first);
        
        
        BigInteger[] pubkey1 = new BigInteger[2];// 
	    BigInteger[] selfkey1 = new BigInteger[2];//client的私钥 
        selfkey1[0]=new BigInteger("15953647027545295465747805382866819526117440265215991308033458652664612350105479503548918269729662417554196828789324434596466902083041772175917887059400125691500007961017266938917738050521832462742456217678582185049805673470256119849702409420801653989737607638660404802938371025939922085578897008974600311573073492980981836831285026649067928786525625207998174712353145920235093522356288006523516279472152289699410257843345037745127281744055032154485461900797286285244753248225027717169101087813977000729794268302831580540477753061465428433116763121401082465834870860517886585078606317057802511464076412575658383250809");
        selfkey1[1]=new BigInteger("59396827360438410266604582349199749216055898571992948703177806601616879219764972441001816650350758043291942356601540534988448114931446242747210956291768476871477210468715582542623679514279370751013310299732579354443331008846033435209536412998391802699177201639274589497794566890906525914845825567081228558255122121273652755788489617213322121985060793098535126275056223374966967314489939092202193956148368913056284695478569383618140081506428293737561957811924023654777353332693279350674527681132964824706390897122890044823285611906156733033490332548458987162603441485582017746100262582508091460872276712559219383121"); 
        
        RSA test2=new RSA(pubkey1,selfkey1);
        String second=test2.decrypt_string(first);
        System.out.print("解密结果");
        System.out.println(second);
		*/
	
		
		
		/*RSA test=new RSA();
		System.out.println("2");
		String plian="nihaeeeeee";
        String first=test.encrypt_string(plian);
        System.out.println(test.encrypt_string(plian).length());
        System.out.print("加密结果");
        System.out.println(first);
        
        String second=test.decrypt_string(first);
        System.out.print("解密结果");
        System.out.println(second);
        */
		
		/*
		pubkey n:15953647027545295465747805382866819526117440265215991308033458652664612350105479503548918269729662417554196828789324434596466902083041772175917887059400125691500007961017266938917738050521832462742456217678582185049805673470256119849702409420801653989737607638660404802938371025939922085578897008974600311573073492980981836831285026649067928786525625207998174712353145920235093522356288006523516279472152289699410257843345037745127281744055032154485461900797286285244753248225027717169101087813977000729794268302831580540477753061465428433116763121401082465834870860517886585078606317057802511464076412575658383250809
		e:65537
		selfkey n:15953647027545295465747805382866819526117440265215991308033458652664612350105479503548918269729662417554196828789324434596466902083041772175917887059400125691500007961017266938917738050521832462742456217678582185049805673470256119849702409420801653989737607638660404802938371025939922085578897008974600311573073492980981836831285026649067928786525625207998174712353145920235093522356288006523516279472152289699410257843345037745127281744055032154485461900797286285244753248225027717169101087813977000729794268302831580540477753061465428433116763121401082465834870860517886585078606317057802511464076412575658383250809
		d:59396827360438410266604582349199749216055898571992948703177806601616879219764972441001816650350758043291942356601540534988448114931446242747210956291768476871477210468715582542623679514279370751013310299732579354443331008846033435209536412998391802699177201639274589497794566890906525914845825567081228558255122121273652755788489617213322121985060793098535126275056223374966967314489939092202193956148368913056284695478569383618140081506428293737561957811924023654777353332693279350674527681132964824706390897122890044823285611906156733033490332548458987162603441485582017746100262582508091460872276712559219383121
		p:2660131774112087213365733470123286751571346835884905832127542071986850223406061116025288897118421249832956841454285850407391439970223848339772295007922763585043767633564353153517554691692571479105632162160891448610650819830371514016538741716289653129330101503943007969563388548953567068597155065453991312443
		q:5997314562685672874767382049575297677909589937806975992224462184207327422584819903253166460640215616584947259659353859705449207838155336639430123912674344102548466015981957426289532219030435594345841340137626242913245507374857213423953273870552183625510697543273825966346039203632485050661108770170066848038363
		*/
		
    }
}
