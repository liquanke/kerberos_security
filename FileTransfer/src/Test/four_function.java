package Test;

import java.math.BigInteger;

import RSA.RSA;

public class four_function {
	public static void main(String[]argc)
    {
		//C-AS演示
		String []result=GetCtoAS(CtoAS("12345678","87654321"));
		String result1=CtoAS("12345678","87654321");
		System.out.println(result1);
		for(int i=0;i<result.length;i++)
		System.out.println(result[i]);
		
		//AS-C演示
		String []result3=GetAStoC(AStoC("12345678","11"));
		String result2=AStoC("12345678","87654321");
		System.out.println(result2);
		for(int i=0;i<result3.length;i++)
			System.out.println(result3[i]);
    }
	
	 //C->AS
	static String CtoAS(String IDc,String Kc) {
		String message = IDc+" "+Kc;
		//进行加密
		BigInteger[] pubkey = new BigInteger[2];// as的公钥 
	    BigInteger[] selfkey = new BigInteger[2];//
	    pubkey[0]=new BigInteger("25210376174222502674597043575587868433359845921729777429392593376801244718803287391093663295857829689208086882496347648829616115541377572451813241929958704483188200039335156767743378800207443537960952226191738855785981692041259305829486869081914154060612653741010933367421479008336912956487753130634749042193278479439430114897156732011964917535436211234837825681273904534007141953227436227382619843005754349476204056079297744670168472659413655833978852141561891871277772065229804420765889528128945186167113014241572555603967433653284618158672392942089685732576941187113403406438710612351646692434368229939197562886053");
        pubkey[1]=new BigInteger("65537");
        RSA rsa_1=new RSA(pubkey,selfkey);
        message=rsa_1.encrypt_string(message);
		//message=test.encrypt_string(message);
        
		int length = message.length();
		String length1 = getlength(length);
		String cpackage = "1001"+length1+message;
		return cpackage;
	}
	
	//AS解析C->AS的包
	static String[] GetCtoAS(String cpackage) {
		
		String []result;
		char[]ss=cpackage.toCharArray();
		String message="";
		for(int i=8;i<cpackage.length();i++) {
			message=message+ss[i];
		}
		
		//先进行rsa解密
		//message = test.decrypt_string(message);
		BigInteger[] pubkey1 = new BigInteger[2];// 
	    BigInteger[] selfkey1 = new BigInteger[2];//as的私钥 
        selfkey1[0]=new BigInteger("25210376174222502674597043575587868433359845921729777429392593376801244718803287391093663295857829689208086882496347648829616115541377572451813241929958704483188200039335156767743378800207443537960952226191738855785981692041259305829486869081914154060612653741010933367421479008336912956487753130634749042193278479439430114897156732011964917535436211234837825681273904534007141953227436227382619843005754349476204056079297744670168472659413655833978852141561891871277772065229804420765889528128945186167113014241572555603967433653284618158672392942089685732576941187113403406438710612351646692434368229939197562886053");
        selfkey1[1]=new BigInteger("7966212676686052274108216357276792764185865224119229760063646737570791718902257939517504206691178952863424802014386735120809926251527963561112050095785812764428405856456532363446566543685184677779473574503024550474875182881157803445730557880546259615808283051140507180767069117958544492666812328643590916803743230918998859396916879335178013369522311005488324026610045994121717660760451950068281301680966849291309938724927135552896273162877329023669569465557061157101029234954680266130151096816933472713677410888633942626849606657904456520762801554926516494475475413862039683685098803478093492093451471858905326660669"); 
        RSA rsa_2=new RSA(pubkey1,selfkey1);
        message=rsa_2.decrypt_string(message);
		
		result = message.split(" ");
		return result;
	}
	
	//AS->C
	static String AStoC(String IDc,String result) {//result表示注册结果，00是失败，11是成功
		
		String message = IDc+" "+result;
		
		//进行加密
		//message=test.encrypt_string(message);
		BigInteger[] pubkey = new BigInteger[2];// client的公钥
	    BigInteger[] selfkey = new BigInteger[2];// 
	    pubkey[0]=new BigInteger("15953647027545295465747805382866819526117440265215991308033458652664612350105479503548918269729662417554196828789324434596466902083041772175917887059400125691500007961017266938917738050521832462742456217678582185049805673470256119849702409420801653989737607638660404802938371025939922085578897008974600311573073492980981836831285026649067928786525625207998174712353145920235093522356288006523516279472152289699410257843345037745127281744055032154485461900797286285244753248225027717169101087813977000729794268302831580540477753061465428433116763121401082465834870860517886585078606317057802511464076412575658383250809");
        pubkey[1]=new BigInteger("65537");
        RSA ras_1=new RSA(pubkey,selfkey);
        message=ras_1.encrypt_string(message);
		
		int length = message.length();
		String length1 = getlength(length);
		String cpackage = "1002"+length1+message;
		return cpackage;
	}
	
	//C解析AS->C的包
		static String[] GetAStoC(String cpackage) {
			String []result;
			char[]ss=cpackage.toCharArray();
			String message="";
			for(int i=8;i<cpackage.length();i++) {
				message=message+ss[i];
			}
			
			//先进行rsa解密
			//message = test.decrypt_string(message);
			BigInteger[] pubkey1 = new BigInteger[2];// 
		    BigInteger[] selfkey1 = new BigInteger[2];//client的私钥 
	        selfkey1[0]=new BigInteger("15953647027545295465747805382866819526117440265215991308033458652664612350105479503548918269729662417554196828789324434596466902083041772175917887059400125691500007961017266938917738050521832462742456217678582185049805673470256119849702409420801653989737607638660404802938371025939922085578897008974600311573073492980981836831285026649067928786525625207998174712353145920235093522356288006523516279472152289699410257843345037745127281744055032154485461900797286285244753248225027717169101087813977000729794268302831580540477753061465428433116763121401082465834870860517886585078606317057802511464076412575658383250809");
	        selfkey1[1]=new BigInteger("59396827360438410266604582349199749216055898571992948703177806601616879219764972441001816650350758043291942356601540534988448114931446242747210956291768476871477210468715582542623679514279370751013310299732579354443331008846033435209536412998391802699177201639274589497794566890906525914845825567081228558255122121273652755788489617213322121985060793098535126275056223374966967314489939092202193956148368913056284695478569383618140081506428293737561957811924023654777353332693279350674527681132964824706390897122890044823285611906156733033490332548458987162603441485582017746100262582508091460872276712559219383121"); 
	        RSA rsa_2=new RSA(pubkey1,selfkey1);
	        message=rsa_2.decrypt_string(message);
			
			result = message.split(" ");
			return result;
		}
	
	
	static String getlength(int length) {
		String len="";
		if(length<10) {
			len ="000"+String.valueOf(length);
		}else if(length<100) {
			len ="00"+String.valueOf(length);
		}else if(length<1000) {
			len ="0"+String.valueOf(length);
		}else {
			len = String.valueOf(length);
		}
		return len;
	}
}
